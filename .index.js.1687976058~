/* Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it's invalid.

This Kata is similar to the Valid Parentheses Kata, but introduces new characters: brackets [], and curly braces {}. Thanks to @arnedag for the idea!

All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]{}.

What is considered Valid?
A string of braces is considered valid if all braces are matched with the correct brace.

Examples: 
"(){}[]"   =>  True
"([{}])"   =>  True
"(}"       =>  False
"[(])"     =>  False
"[({})](]" =>  False

*/

function validBraces(braces){

  let bracesStack = [];

  for (let i = 0; i < braces.length; i++) {
    let brace = braces[i];

    // early exit for inputs with less than 2 elements
    if (braces.length < 2) {
      return false;
    }   

    // early exit for inputs that have odd length
    if (braces.length % 2 !== 0) {
      return false
    }

    // Build a logic where upon receiving an opening bracket, push into a result array the respective closing bracket. In the third "else if" we will always pop the last element of the array regardless of whether it matches the current closing bracket or not. That way, in case we have only matching brackets, the array should be empty in the end. If they do not match, we will have an early exit and will return false
    if (brace === "(") {
            bracesStack.push(")");
        } else if (brace === "[") {
            bracesStack.push("]");
        } else if (brace === "{") {
            bracesStack.push("}");
        } else if (brace !== bracesStack.pop()){
            return false; 
        }
  }
  return bracesStack.length === 0;
}
validBraces("()");
